@model Telerik.Sitefinity.Frontend.Navigation.Mvc.Models.INavigationModel

@using Telerik.Sitefinity.Frontend.Mvc.Helpers;
@using Telerik.Sitefinity.Frontend.Navigation.Mvc.Models;
@using Telerik.Sitefinity.Modules.Pages;

@*Add scripts and stylesheets*@

<div class="@Model.CssClass">
@* @Html.Action("GetView", new { viewName = "Dropdown",  model= Model}) *@

    <nav class="ui tiered menu">
        @RenderRootLevelNode(@Model.Nodes)
        @RenderSubLevelsRecursive(@Model.Nodes)
    </nav>
</div>

@*Here is specified the rendering for the root level*@
@helper RenderRootLevelNode(IList<NodeViewModel> nodes)
{
        foreach(var node in nodes)
        {
            <a class="item @GetClass(node)" href="@node.Url" target="@node.LinkTarget">@node.Title</a>
        }
}

@*Here is specified the rendering for all child levels*@
@helper RenderSubLevelsRecursive(IList<NodeViewModel> nodes)
{
    var selectedNode = nodes.SingleOrDefault(node => node.IsCurrentlyOpened || node.HasChildOpen);

    if(selectedNode !=null)
    {
         <nav class="ui sub menu">
            @foreach (var node in selectedNode.ChildNodes)
            {
                <a class="item @GetClass(node)" href="@node.Url" target="@node.LinkTarget">@node.Title</a>
            }
        </nav>
        @RenderSubLevelsRecursive(selectedNode.ChildNodes);
    }
}

@*Resolves the class that will be added for each node depending whether it is selected*@
@helper GetClass(NodeViewModel node)
{
    if (node.IsCurrentlyOpened)
    {
        @Html.Raw("active");
    }
    else if (node.HasChildOpen)
    {
        @Html.Raw("active");
    }
}
