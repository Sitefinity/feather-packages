@model Telerik.Sitefinity.Frontend.Search.Mvc.Models.ISearchResultsModel

@using Telerik.Sitefinity.Frontend.Mvc.Helpers;
@using Telerik.Sitefinity.Frontend.Search.Mvc.Models;
@using Telerik.Sitefinity.Modules.Pages;
@using Telerik.Sitefinity.Modules.Libraries;
@using Telerik.Sitefinity.Libraries.Model;
@using Telerik.Sitefinity.Web;

<div class=" @Model.CssClass" id="sf-search-result-container">

    <div class="d-flex align-items-center justify-content-between my-3">
        @if (@Model.Results.TotalCount > 0)
        {
            if (ViewBag.IsFilteredbyPermission)
            {
                <h1 role="alert" aria-live="assertive">@Html.HtmlSanitize(Model.ResultText)</h1>
            }
            else
            {
                <h1 role="alert" aria-live="assertive">@Model.Results.TotalCount @Html.HtmlSanitize(Model.ResultText)</h1>
            }
        }
        else
        {
            <h1 role="alert" aria-live="assertive">@Html.Resource("No") @Html.HtmlSanitize(Model.ResultText)</h1>
        }
        @if (Model.AllowSorting && @Model.Results.TotalCount > 0)
        {
            <div class="d-flex align-items-center gap-2" data-sf-hide-while-loading="true">
                <label class="form-label text-nowrap mb-0" for="@Html.UniqueId("searchSort")">@Html.Resource("SortBy")</label>
                <select class="userSortDropdown form-select" title="@Html.Resource("SortDropdown")" id="@Html.UniqueId("searchSort")">
                    <option value="@OrderByOptions.Relevance" @(Model.OrderBy == OrderByOptions.Relevance ? "selected=selected" : "")>@Html.Resource("Relevance")</option>
                    <option value="@OrderByOptions.Newest" @(Model.OrderBy == OrderByOptions.Newest ? "selected=selected" : "")>@Html.Resource("NewestFirst")</option>
                    <option value="@OrderByOptions.Oldest" @(Model.OrderBy == OrderByOptions.Oldest ? "selected=selected" : "")>@Html.Resource("OldestFirst")</option>
                </select>
            </div>
        }

    </div>

    @if (Model.Languages.Length > 1)
    {
        <div data-sf-hide-while-loading="true">
            <span>@Html.Resource("ChangeResultsLanguageLabel") </span>
            @for (var i = 0; i < Model.Languages.Length; i++)
            {
                <a href="@(String.Format(ViewBag.LanguageSearchUrlTemplate, Model.Languages[i].Name))">@Model.Languages[i].DisplayName</a>
                if (i < Model.Languages.Length - 2)
                {
                    <span>, </span>
                }
                else if (i == Model.Languages.Length - 2)
                {
                    <span> @Html.Resource("OrLabel") </span>
                }
            }
        </div>
    }

    <div data-sf-hide-while-loading="true">

        @{
            LibrariesManager librariesManager = LibrariesManager.GetManager();
        }

        @foreach (var item in Model.Results.Data)
        {
            var hasLink = item.GetValue("Link") != null && !String.IsNullOrEmpty(item.GetValue("Link").ToString());
            <div class="d-flex gap-3 my-3">

                @if (((Telerik.Sitefinity.Services.Search.Model.Document)item).ItemType.ToString() == typeof(Telerik.Sitefinity.Libraries.Model.Image).ToString())
                {
                    <div class="flex-shrink-0">
                        <a href="@item.GetValue("Link")">
                            <img src="@item.GetValue("Link")" alt="@item.GetValue("Title")" width="120" />
                        </a>
                    </div>
                }
                else if (((Telerik.Sitefinity.Services.Search.Model.Document)item).ItemType.ToString() == typeof(Telerik.Sitefinity.Libraries.Model.Video).ToString())
                {
                    var videoTmbId = new Guid((string)item.GetValue("Id"));
                    string thumbUrl = HyperLinkHelpers.GetVideoThumbnailUrl(librariesManager, videoTmbId);
                    if (!string.IsNullOrEmpty(thumbUrl))
                    {
                        <div class="flex-shrink-0">
                            <a href="@item.GetValue("Link")" class="position-relative">
                                <img src="@thumbUrl" alt="@item.GetValue("Title")" width="120" />

                                <div class="position-absolute top-50 start-50 translate-middle">
                                    <svg class="svg-inline--fa fa-w-18" aria-hidden="true">
                                        <use xlink:href="~/ResourcePackages/Bootstrap5/assets/dist/sprites/solid.svg#play" class="fa-primary"></use>
                                    </svg>
                                </div>
                            </a>
                        </div>
                    }
                }

                else
                {

                }


                <div class="flex-grow-1">

                    <h3>
                        @if (hasLink)
                        {
                            <a href="@item.GetValue("Link")">@item.GetValue("Title")</a>
                        }
                        else
                        {
                            @item.GetValue("Title")
                        }
                    </h3>

                    <div>@Html.HtmlSanitize((string)item.GetValue("HighLighterResult"))</div>
                    @if (hasLink)
                    {
                        <a class="link-secondary" href="@item.GetValue("Link")">@item.GetValue("Link")</a>
                    }
                </div>
            </div>
        }

    </div>

    @if (Model.DisplayMode == ListDisplayMode.Paging && Model.TotalPagesCount != null && Model.TotalPagesCount > 1)
    {
        if (ViewBag.IsFilteredbyPermission)
        {
            <ul class="pagination" data-sf-hide-while-loading="true">
                @if (Model.CurrentPage > 1)
                {
                    <li class="page-item">
                        <a class="page-link" href='@string.Format(ViewBag.RedirectPageUrlTemplate, Model.CurrentPage - 1)'>@Html.Resource("Prev")</a>
                    </li>
                }
                @if (Model.CurrentPage < @Model.TotalPagesCount)
                {
                    <li class="page-item">
                        <a class="page-link" href='@string.Format(ViewBag.RedirectPageUrlTemplate, Model.CurrentPage + 1)'>@Html.Resource("Next")</a>
                    </li>
                }
            </ul>
        }
        else
        {
            var numOfItems = (Model.CurrentPage == Model.TotalPagesCount) ? Html.Raw(Model.Results.TotalCount) : Html.Raw(Model.CurrentPage * Model.ItemsPerPage);
            <div class="d-flex align-items-center justify-content-between" data-sf-hide-while-loading="true">
                <div>
                    @Html.Action("Index", "ContentPager", new
                    {
                    currentPage = Model.CurrentPage,
                    totalPagesCount = Model.TotalPagesCount,
                    redirectUrlTemplate = ViewBag.RedirectPageUrlTemplate
                    })
                </div>

                <div class="mb-3"><em class="text-muted">@(Model.CurrentPage * Model.ItemsPerPage - Model.ItemsPerPage + 1) - @numOfItems of @Model.Results.TotalCount results</em></div>
            </div>
        }
    }

    <input type="hidden" data-sf-role="searchResOrderBy" value='@Request.QueryStringGet("orderBy")' />
    <input type="hidden" data-sf-role="searchResLanguage" value='@Request.QueryStringGet("language")' />
    <input type="hidden" data-sf-role="searchResIndexCatalogue" value='@Request.QueryStringGet("indexCatalogue")' />
    <input type="hidden" data-sf-role="searchResQuery" value='@Request.QueryStringGet("searchQuery")' />
    <input type="hidden" data-sf-role="scoringInfo" value='@Request.QueryStringGet("scoringInfo")' />
    <input type="hidden" data-sf-role="resultsForAllSites" value='@Request.QueryStringGet("resultsForAllSites")' />
    <input type="hidden" data-sf-role="scoringInfo" value='@Request.QueryStringGet("scoringInfo")' />
    <input type="hidden" data-sf-role="filterParameter" value='@Request.QueryStringGet("filter")' />

</div>

<div id="sf-search-results-loading-indicator" style="display:none">
    <div class="d-flex justify-content-center my-5">
        <div class="spinner-border text-primary my-5" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>
</div>

@Html.Script(Url.WidgetContent("Mvc/Scripts/SearchResults/Search-results.js"), "bottom", false)