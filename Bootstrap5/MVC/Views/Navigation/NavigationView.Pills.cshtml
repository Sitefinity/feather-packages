@model Telerik.Sitefinity.Frontend.Navigation.Mvc.Models.INavigationModel

@using Telerik.Sitefinity.Frontend.Mvc.Helpers;
@using Telerik.Sitefinity.Frontend.Navigation.Mvc.Models;
@using Telerik.Sitefinity.Modules.Pages;

@*Add scripts and stylesheets*@

@Html.Script(Url.Content("~/ResourcePackages/Bootstrap5/assets/dist/js/bootstrap.min.js"), "frameworks", false)

<div class="@Model.CssClass">
    <nav class="navbar navbar-expand-md">
        @* @Html.Action("GetView", new { viewName = "Dropdown", model= Model}) *@

        <ul class="nav nav-pills">
            @{
                int i = 0;
                foreach (var node in Model.Nodes)
                {
                    @RenderRootLevelNode(node, i);
                    i++;
                }
            }
        </ul>
    </nav>
</div>

@*Here is specified the rendering for the root level*@
@helper RenderRootLevelNode(NodeViewModel node, int i)
{
    if (node.ChildNodes.Count > 0)
    {
        <li class="nav-item dropdown">
            <a class="nav-link dropdown-toggle @GetClass(node)" id='@Html.UniqueId("pillsDropdownMenuLink" + i)' role="button" data-bs-toggle="dropdown" data-bs-auto-close="outside" aria-haspopup="true" aria-expanded="false">@node.Title</a>
            <ul class="dropdown-menu" aria-labelledby='@Html.UniqueId("pillsDropdownMenuLink" + i)'>
                @RenderSubLevelsRecursive(node, i)
            </ul>
        </li>
    }
    else
    {
        <li class="nav-item">
            <a class="nav-link @GetClass(node)" href="@node.Url" target="@node.LinkTarget">@node.Title</a>
        </li>
    }
}

@*Here is specified the rendering for all child levels*@
@helper RenderSubLevelsRecursive(NodeViewModel node, int i)
{
    int j = 0;
    foreach (var childNode in node.ChildNodes)
    {
        if (childNode.ChildNodes.Count > 0)
        {
            <li class="nav-item dropdown @GetClass(node)">

                <a class="dropdown-item pe-4 @GetClass(childNode)" href="@childNode.Url">
                    @childNode.Title
                </a>
                <span class="p-1 position-absolute top-0 end-0 @GetClass(childNode)" id='@Html.UniqueId("navbarDropdownMenuLink" + i + j)' role="button" data-bs-auto-close="outside" data-bs-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                    <svg class="svg-inline--fa fa-w-16" aria-hidden="true">
                        <use xlink:href="~/ResourcePackages/Bootstrap5/assets/dist/sprites/solid.svg#@GetCaretDirection()"></use>
                    </svg>
                </span>
                <ul class="dropdown-menu top-0 start-100 mt-n2" aria-labelledby='@Html.UniqueId("navbarDropdownMenuLink" + i + j)'>
                    @RenderSubLevelsRecursive(childNode, j)
                </ul>
            </li>
        }
        else
        {
            <li>
                <a class="dropdown-item pe-4 @GetClass(childNode)" href="@childNode.Url" target="@childNode.LinkTarget">@childNode.Title</a>
            </li>
        }
        j++;
    }
}

@*Resolves the class that will be added for each node depending whether it is selected*@
@helper GetClass(NodeViewModel node)
{

    if (node.IsCurrentlyOpened)
    {
        @Html.Raw("active");
    }
    else if (node.HasChildOpen)
    {
        @Html.Raw("active");
    }
}
@*Resolves the caret direction depending on language direction*@
@helper GetCaretDirection()
{
    if (Html.RenderDirAttribute().ToString() != "dir=\"rtl\"")
    {
        @Html.HtmlSanitize("caret-right");
    }
    else
    {
        @Html.HtmlSanitize("caret-left");
    }
}