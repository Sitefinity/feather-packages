@model Telerik.Sitefinity.Frontend.Navigation.Mvc.Models.INavigationModel

@using Telerik.Sitefinity.Frontend.Mvc.Helpers;
@using Telerik.Sitefinity.Frontend.Navigation.Mvc.Models;
@using Telerik.Sitefinity.Modules.Pages;

@*Add scripts and stylesheets*@

<div class="@Model.CssClass">
    <nav>
        @* @Html.Action("GetView", new { viewName = "Dropdown", model= Model}) *@

        @RenderRootLevelNode(@Model.Nodes)
        @RenderSubLevelsRecursive(@Model.Nodes)
    </nav>
</div>

@*Here is specified the rendering for the root level*@
@helper RenderRootLevelNode(IList<NodeViewModel> nodes)
{
    <ul class="nav nav-tabs" role="tablist">
        @foreach(var node in nodes)
        {
            <li class="nav-item" role="tab">
                <a class="nav-link @GetClass(node)" href="@node.Url" target="@node.LinkTarget">@node.Title</a>
            </li>
        }
    </ul>
}

@*Here is specified the rendering for all child levels*@
@helper RenderSubLevelsRecursive(IList<NodeViewModel> nodes)
{
    var selectedNode = nodes.SingleOrDefault(node => node.IsCurrentlyOpened || node.HasChildOpen);

    if(selectedNode !=null)
    {
         <ul class="nav nav-pills" role="tablist">
            @foreach (var node in selectedNode.ChildNodes)
            {
                <li class="nav-item" role="tab">
                    <a class="nav-link @GetClass(node)" href="@node.Url" target="@node.LinkTarget">@node.Title</a>
                </li>
            }
        </ul>
        @RenderSubLevelsRecursive(selectedNode.ChildNodes);
    }
}

@*Resolves the class that will be added for each node depending whether it is selected*@
@helper GetClass(NodeViewModel node)
{
    if (node.IsCurrentlyOpened)
    {
        @Html.HtmlSanitize("active");
    }
    else if (node.HasChildOpen)
    {
        @Html.HtmlSanitize("active");
    }
}
