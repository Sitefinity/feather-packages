@model Telerik.Sitefinity.Frontend.Forms.Mvc.Models.Fields.TextField.TextFieldViewModel

@using Telerik.Sitefinity.UI.MVC;
@using Telerik.Sitefinity.Frontend.Forms.Mvc.Helpers;
@using Telerik.Sitefinity.Frontend.Mvc.Helpers;
@using Telerik.Sitefinity.Modules.Pages;
@using Telerik.Sitefinity.Frontend.Forms.Mvc.Models.Fields.TextField;

@Html.Script(ScriptRef.JQuery, "jquery", false)
<!-- InputCssClass class variable -->

@{ 
    var inputCssClass = "";
    HashSet<TextType> availableOptions = new HashSet<TextType>() { TextType.Text, TextType.Password, TextType.Date, TextType.DateTimeLocal, TextType.Month, TextType.Time,
    TextType.Week, TextType.Number, TextType.Email, TextType.Url, TextType.Tel, TextType.Color };

    if (availableOptions.Contains(Model.InputType))
    {
        inputCssClass = "form-control";
    }

    var isRequired = Model.ValidatorDefinition.Required.HasValue && Model.ValidatorDefinition.Required.Value ? "true" : "false";
    var hasDescription = !string.IsNullOrEmpty(Model.MetaField.Description);
}

<div class="@Model.CssClass my-3" data-sf-role="text-field-container">
    <input data-sf-role="violation-restrictions" type="hidden" value='{"maxLength":"@Model.ValidatorDefinition.MaxLength", "minLength": "@Model.ValidatorDefinition.MinLength"}' />
    <input data-sf-role="violation-messages" type="hidden" value='{"maxLength":"@Model.ValidatorDefinition.MaxLengthViolationMessage", "required": "@Model.ValidatorDefinition.RequiredViolationMessage", "invalid": "@Html.Resource("InvalidEntryMessage")", "regularExpression": "@Model.ValidatorDefinition.RegularExpressionViolationMessage"}' />

    <label class="form-label" for='@Html.UniqueId("Textbox")'>@Model.MetaField.Title</label>
    <input 
        id='@Html.UniqueId("Textbox")'
        type="@Model.InputType.ToHtmlInputType()"
        class="@inputCssClass"
        name="@Model.MetaField.FieldName"
        placeholder="@Model.PlaceholderText"
        value="@Model.Value"
        aria-required="@isRequired"
        data-sf-role="text-field-input"
        @Html.Raw(Model.ValidationAttributes)
        @{if (hasDescription) { <text>aria-describedby='@Html.UniqueId("TextboxInfo") @Html.UniqueId("TextboxErrorMessage")'</text> } else { <text>aria-describedby='@Html.UniqueId("TextboxErrorMessage")'</text> } } />
        
    <div id='@Html.UniqueId("TextboxErrorMessage")' data-sf-role="error-message" role="alert" aria-live="assertive" class="invalid-feedback"></div>

     @if (hasDescription) 
     {
         <p id='@Html.UniqueId("TextboxInfo")' class="form-text">@Model.MetaField.Description</p>
     }

     
</div>

@Html.Script(Url.WidgetContent("Mvc/Scripts/TextField/text-field.js"), "bottom", false)
