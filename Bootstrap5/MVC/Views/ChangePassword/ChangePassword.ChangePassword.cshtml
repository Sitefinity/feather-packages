@model Telerik.Sitefinity.Frontend.Identity.Mvc.Models.ChangePassword.ChangePasswordViewModel

@using System.Linq.Expressions;
@using Telerik.Sitefinity.UI.MVC;
@using Telerik.Sitefinity.Frontend.Mvc.Helpers;
@using Telerik.Sitefinity.Frontend.Identity.Mvc.Models.ChangePassword;
@using Telerik.Sitefinity.Services;

<div class="@Model.CssClass">
    @if (Model.PasswordChanged)
    {
        <h3 role="alert" aria-live="assertive">@Html.Resource("ChangePasswordSuccess")</h3>
    }
    else
    {
        <h3>@Html.Resource("ChangePasswordHeader")</h3>
        
        if (!string.IsNullOrEmpty(Model.ExternalProviderName))
        {
            <div>
                @string.Format(Html.Resource("ExternalProviderMessage"), Model.ExternalProviderName)
            </div>
        }
        else
        {
            using (Html.BeginFormSitefinity("SetChangePassword", "ChangePassword"))
            {
                if (!string.IsNullOrEmpty(Model.Error))
                {
                    <div class="alert alert-danger" role="alert" aria-live="assertive">
                        @Model.Error
                    </div>
                }

                @FormGroupPanel("ChangePasswordOldPassword", u => u.OldPassword, "ChangePasswordOld", "password")

                @FormGroupPanel("ChangePasswordNewPassword", u => u.NewPassword, "ChangePasswordNew", "password")

                @FormGroupPanel("ChangePasswordRepeatPassword", u => u.RepeatPassword, "ChangePasswordRepeat", "password") 

                <button type="submit" class="btn btn-primary" @(SystemManager.IsDesignMode ? "disabled" : "") >@Html.Resource("ChangePasswordSaveButton")</button> 
            }
        }
    }
</div>

@helper FormGroupPanel(string label, Expression<Func<ChangePasswordViewModel, string>> expression, string descId, string inputType = "text", string classValue = null, IDictionary<string, object> additionalAttributes = null)
{
    var hasValidationMessage = Html.ValidationMessageFor(expression) != null;
    var attributes = new Dictionary<string, object>();
    var cls = "form-control";

    if (classValue != null)
    {
        cls += " " + classValue;
    }

    attributes.Add("class", cls);

    if (hasValidationMessage)
    {
        attributes.Add("aria-describedby", Html.UniqueId(descId));
    }
    if (additionalAttributes != null)
    {
        attributes = attributes.Concat(additionalAttributes).ToDictionary(x => x.Key, x => x.Value);
    }

    <div class="my-3">

        @Html.LabelFor(expression, Html.Resource(label), new { @class = "form-label" })

        @switch (inputType)
        {
            case "text":
                @Html.TextBoxFor(expression, attributes);
                break;

            case "textarea":
                @Html.TextAreaFor(expression, attributes);
                break;

            case "password":
                @Html.PasswordFor(expression, attributes);
                break;

            default:
                break;
        }

        @if (hasValidationMessage)
        {
            <div id='@Html.UniqueId(descId)' class="text-danger" role="alert" aria-live="assertive">
                @Html.ValidationMessageFor(expression)
            </div>
        }
    </div>
}