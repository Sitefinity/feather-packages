@model Telerik.Sitefinity.Frontend.Navigation.Mvc.Models.INavigationModel

@using Telerik.Sitefinity.Frontend.Mvc.Helpers;
@using Telerik.Sitefinity.Frontend.Navigation.Mvc.Models;
@using Telerik.Sitefinity.Modules.Pages;

@*Add scripts and stylesheets*@
@Html.Script(ScriptRef.JQuery, "top", false)

@Html.Script("http://netdna.bootstrapcdn.com/bootstrap/3.0.3/js/bootstrap.min.js", "top", false)
@Html.Script(Url.WidgetContent("Mvc/Scripts/Navigation.js"), "bottom", false)

<div class="@Model.CssClass">
    @Html.Action("GetView", new { viewName = "Dropdown",  model= Model})
    <nav class="navbar navbar-default" role="navigation">

        <div class="container-fluid">
            <div class="navbar-header">
              <button type="button" class="navbar-toggle" data-toggle="collapse" data-target="#bs-example-navbar-collapse-1">
                <span class="sr-only">Toggle navigation</span>
            </div>

            <div class="collapse navbar-collapse in" id="bs-example-navbar-collapse-1">
                <div class="nav navbar-nav">
                    @foreach (var node in Model.Nodes)
                    {
                        @RenderRootLevelNode(node);
                    }
              </div>
            </div><!-- /.navbar-collapse -->
        </div><!-- /.container-fluid -->
    </nav>
</div>

@*Here is specified the rendering for the root level*@
@helper RenderRootLevelNode(NodeViewModel node)
{
    if (node.ChildNodes.Count > 0)
    {
        <span class="dropdown">
            <a href="#" data-toggle="dropdown" class="dropdown-toggle">@node.Title
                <span class="caret"></span>
            </a>
            <ul class="dropdown-menu">
                @RenderSubLevelsRecursive(node)
            </ul>
        </span>
    }
    else
    {
        <span class="@GetClass(node)"><a href="@node.Url" target="@node.LinkTarget">@node.Title</a></span>
    }
}

@*Here is specified the rendering for all child levels*@
@helper RenderSubLevelsRecursive(NodeViewModel node)
{
    foreach (var childNode in node.ChildNodes)
    {
        if(childNode.ChildNodes.Count > 0)
        {
             <span class="dropdown-submenu">
                <a href="@childNode.Url" target="@childNode.LinkTarget">@childNode.Title
                    <span class="right-caret"></span>
                </a>
                <ul class="dropdown-menu">
                    @RenderSubLevelsRecursive(childNode)
                </ul>
            </span>
        }
        else
        {
            <span class="@GetClass(childNode)">
                <a href="@childNode.Url" target="@childNode.LinkTarget">@childNode.Title</a>
            </span>
        }
    }
}

@*Resolves the class that will be added for each node depending whether it is selected*@
@helper GetClass(NodeViewModel node)
{

    if (node.IsCurrentlyOpened)
    {
        @Html.Raw("active");
    }
    else if (node.HasChildOpen)
    {
        @Html.Raw("active");
    }
}
