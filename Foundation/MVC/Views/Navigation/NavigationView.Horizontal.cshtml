@model Telerik.Sitefinity.Frontend.Navigation.Mvc.Models.INavigationModel

@using Telerik.Sitefinity.Frontend.Mvc.Helpers;
@using Telerik.Sitefinity.Frontend.Navigation.Mvc.Models;
@using Telerik.Sitefinity.Modules.Pages;

@*Add scripts and stylesheets*@
@Html.Script("/ResourcePackages/Foundation/assets/dist/js/foundation.min.js")

<div class="@Model.CssClass">

@* <div class="show-for-small-only">@Html.Action("GetView", new { viewName = "Dropdown", model= Model})</div> *@

    <nav class="top-bar" data-topbar data-options="is_hover: false">
        <ul class="title-area">
            <li class="name">
                <h1>
                    <a href="#">Sitefinity</a>
                </h1>
            </li>
            <li class="toggle-topbar menu-icon"><a href><span>Menu</span></a></li>
        </ul>
        <section class="top-bar-section">
            <ul>
                @foreach (var node in Model.Nodes)
                {
                    @RenderRootLevelNode(node);
                }
            </ul>
        </section>
    </nav>
</div>

@*Here is specified the rendering for the root level*@
@helper RenderRootLevelNode(NodeViewModel node)
{
    if (node.ChildNodes.Count > 0)
    {
        <li class="has-dropdown">
            <a href="#">@node.Title</a>
            <ul class="dropdown">
                @RenderSubLevelsRecursive(node)
            </ul>
        </li>
    }
    else
    {
        <li>
            <a href="@node.Url" target="@node.LinkTarget">@node.Title</a>
        </li>
    }
}

@*Here is specified the rendering for all child levels*@
@helper RenderSubLevelsRecursive(NodeViewModel node)
{
    foreach (var childNode in node.ChildNodes)
    {
        if(childNode.ChildNodes.Count > 0)
        {
             <li class="has-dropdown @GetClass(childNode)">
                <a target="@childNode.LinkTarget">@childNode.Title
                    <!-- <span class="right-caret"></span> -->
                </a>
                <ul class="dropdown">
                    @RenderSubLevelsRecursive(childNode)
                </ul>
            </li>
        }
        else
        {
            <li class="@GetClass(childNode)">
                <a href="@childNode.Url" target="@childNode.LinkTarget">@childNode.Title</a>
            </li>
        }
    }
}

@*Resolves the class that will be added for each node depending whether it is selected*@
@helper GetClass(NodeViewModel node)
{

    if (node.IsCurrentlyOpened)
    {
        @Html.Raw("active");
    }
    else if (node.HasChildOpen)
    {
        @Html.Raw("active");
    }
}

@Html.Script("/ResourcePackages/Foundation/assets/dist/js/foundation.topbar.min.js")
@Html.Script("/ResourcePackages/Foundation/assets/dist/js/foundation.init.js")

